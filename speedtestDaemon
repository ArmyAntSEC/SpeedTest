#!/usr/bin/python

import speedtest
import logging
import os

import socket
import random
import string

import subprocess
import re #Regular expressions

import numpy as np

import matplotlib
matplotlib.use('Agg') 
import matplotlib.pyplot as plt
import matplotlib.dates as mdates


from datetime import datetime
#from datetime import tzinfo

def doSpeedtestAPI():
	logger = logging.getLogger(__name__)
	serversToAskFor = []
	
	result = subprocess.check_output( '/opt/bbk/src/cli/cli' );
#	result = "Start: 2021-03-31 19:34:53\nNetwork operator: Bahnhof AB\nSupport ID: gbg203bb0e43\nLatency:  Latency:       8.954 ms\nDownload: Download:     95.458 Mbit/s\nUpload:   Upload:       95.765 Mbit/s\nMeasurement ID: 375421664";

	reg = re.compile ( r"Start: (?P<time>.*)\n(.*\n){3}Download: Download:\s+(?P<download>[\d\.]+).*\nUpload:\s+Upload:\s+(?P<upload>[\d\.]+)" );
	match = reg.search( result, 0 )
	if match != None:
		time = match.group( 'time' );
		download = float(match.group( 'download' ));
		upload = float(match.group( 'upload' ));
		logger.debug ( "Download: " + str(download) );
		logger.debug( "Upload: " + str(upload) );
	else:
		logger.error ( "Could not parse BBK output" );
		logger.error( result )

	results = {'downloadMbps': download, 'uploadMbps': upload }

	return results

def fpingAndGetStats( addresses ):
	logger = logging.getLogger(__name__)
	stats = {}

	# Prepopulate the return struct with error values to be overwritten if things work out.
	for server in addresses:
		stats[server] = {'loss': 100.0, 'avgPing': 0}

	try:		
		# Run fping with 10 packages, showing only final stats.		
		proc = subprocess.Popen( ['/usr/bin/fping', '-c 10', '-q'] + addresses, stderr=subprocess.PIPE );		
		result = proc.communicate()						
		stString = result[1]
		logger.debug ( stString )
		# sample string: "kth.se : xmt/rcv/%loss = 10/10/0%, min/avg/max = 3.69/23.6/122"

		reg = re.compile ( r"(?P<server>\S+)\s+: xmt/rcv/%loss = (?:[\d\.]+)/(?:[\d\.]+)/(?P<loss>[\d\.]+)%(?:, min/avg/max = (?:[\d\.]+)/(?P<avgPing>[\d\.]+)/(?:[\d\.]+))?" )
		startPos = 0;
		while ( True ):			
			match = reg.search( stString, startPos )
			if match == None:
				break						

			server = match.group('server')

			loss = float(match.group('loss'))			
			if loss == None:
				loss = float('nan')			
			loss = float(loss)			
			
			avgPing = match.group('avgPing')
			if avgPing == None:
				avgPing = float('nan')
			avgPing = float(avgPing)


			theseStats = {'loss': loss, 'avgPing': avgPing}
			
			logger.debug( (server, theseStats) )
			
			stats[server] = theseStats;			
			startPos = match.end(0)
		
	except:
		logger.exception( "Error doing internet connectivity check" )
		
	return stats

def doHostnameResolution():
	
	allOK = False
	try:
		response = socket.gethostbyname( 'ping.sunet.se' )
		logger.debug( "Result of resolving ping.sunet.se: %s", response )
		allOK = True	
	except socket.gaierror:
		logger.error( "DNS resolution failed. Probably no internet connection." )
	except:
		logger.error( "Unexpected error doing DNS resolution" )
	
		

	return allOK

def doAllMeasurements():
	logger = logging.getLogger(__name__)

	speedMeasurement = doSpeedtestAPI()
	logger.info ( speedMeasurement )

	dnsOK = doHostnameResolution()
	logger.info( 'DNS OK: %d', dnsOK )

	pingStats = fpingAndGetStats( ['192.168.1.1', '62.63.212.197', 'ping.sunet.se'] )
	logger.info ( pingStats )


	return {'timestamp': datetime.now(), 'dnsOK': dnsOK, 'pingStats': pingStats, 'speedMeasurement': speedMeasurement}

def writeAMeasurementResult( result, logFileName ):	

	outputString = "{}\t{}\t{}\t{}\t{}\t{}\t{}\t{}\t{}\t{}\n".format( 
		result["timestamp"].strftime('%Y-%m-%dT%H:%M:%S.%fZ'), 
		int(result['dnsOK']), 
		result['pingStats']['192.168.1.1']['loss'],
		result['pingStats']['192.168.1.1']['avgPing'],
		result['pingStats']['62.63.212.197']['loss'],
		result['pingStats']['62.63.212.197']['avgPing'],
		result['pingStats']['ping.sunet.se']['loss'],
		result['pingStats']['ping.sunet.se']['avgPing'],
		result['speedMeasurement']["downloadMbps"], 
		result['speedMeasurement']["uploadMbps"] )	
	logger.debug ( outputString );
		
	if (os.path.isfile( logFileName) == False):
		logger.debug ( "Creating a new file" );
		fout = open( logFileName, 'w')
		fout.write( 'timestamp\tdnsOK\tbbbLoss\tbbbPingAvg\tkthLoss\tkthPingAvg\tgoogleLoss\tgooglePingAvg\tdownloadMbps\tuploadMbps\n' )
		fout.close()
	
	fout = open( logFileName, 'a')	
	fout.seek(0,os.SEEK_END)
	fout.write( outputString )
	fout.close()

def parseLogFile( logFileName ):
	logger = logging.getLogger(__name__)

	fin = open( logFileName, 'r' )
	fin.readline() #Read the header line
	
	timestampList = []
	dnsOKList = []
	bbbLossList = []
	bbbAvgPingList = []
	kthLossList = []
	kthAvgPingList = []
	googleLossList = []
	googleAvgPingList = []
	downloadList = []
	uploadList = []	

	for line in fin:
		# Tokenize line and store as arrays		
		lineSplit = line.split("\t")

		try:
			thisTimestamp = datetime.strptime( lineSplit[0], '%Y-%m-%dT%H:%M:%S.%fZ' )
			thisDnsOK = int(lineSplit[1])
			thisBbbLoss = float(lineSplit[2])
			thisBbbPingAvg = float(lineSplit[3])
			thisKthLoss = float(lineSplit[4])
			thisKthPingAvg = float(lineSplit[5])
			thisGoogleLoss = float(lineSplit[6])
			thisGooglePingAvg = float(lineSplit[7])
			thisDownloadMbps = float(lineSplit[8])
			thisUploadMbps = float(lineSplit[9])
		except:
			logger.error ( "Could not parse log file. Moving on. Bad line: [%s]", line )
		
		timestampList.append( thisTimestamp )
		
		dnsOKList.append(thisDnsOK)

		bbbLossList.append(thisBbbLoss)
		bbbAvgPingList.append(thisBbbPingAvg)
		kthLossList.append(thisKthLoss)
		kthAvgPingList.append(thisKthPingAvg)
		googleLossList.append(thisGoogleLoss)
		googleAvgPingList.append(thisGooglePingAvg)

		downloadList.append( thisDownloadMbps )
		uploadList.append( thisUploadMbps )		
	
	fin.close()
	
	pingServers = ['192.168.1.1', '62.63.212.197', 'ping.sunet.se']
	
	lossArray = np.transpose(np.vstack( (np.array(bbbLossList), np.array(kthLossList), np.array(googleLossList)) ))
	pingAvgArray = np.transpose(np.vstack( (np.array(bbbAvgPingList), np.array(kthAvgPingList), 
		np.array(googleAvgPingList)) ))	

	return {"timestamp": np.array(timestampList), 
		"dnsOK": np.array(dnsOKList),
		"loss": lossArray,		
		"pingAvg": pingAvgArray,
		"downloadMbps": np.array(downloadList), 
		"uploadMbps": np.array(uploadList) }
	
def makePlots(logFileName):
	data = parseLogFile(logFileName)
	
	# Plot the arrays in data
	ax1 = plt.subplot(311)
	ax2 = plt.subplot(312)
	ax3 = plt.subplot(313)
	ax4 = ax3.twinx() #A second axis on top of ax3
	fig = ax1.figure

	ax1.plot( data["timestamp"], data["downloadMbps"], 'b.-', data["timestamp"], data["uploadMbps"], 'r.-' )		
	ax1.set_ylabel ( "[Mbit]")
	ax1.legend ( ['Download', 'Upload'], loc='upper left', prop={'size': 10} )
	ax1.xaxis_date()

	ax2.plot( data["timestamp"], data["pingAvg"], '.-')		
	ax2.set_ylabel ( "Avg ping [ms]")
	ax2.legend ( ['Router', 'Gateway', 'Sunet'], loc='upper left', prop={'size': 10} )	
	ax2.xaxis_date()

	ax3.plot( data["timestamp"], data["loss"], '.-' )		
	ax3.set_ylabel ( "[%]")	
	ax3.legend ( ['Router', 'gateway', 'Sunet'], loc='upper left', prop={'size': 10} )	
	ax3.set_xlabel("Measurement date")
	ax3.xaxis_date()		
	
	ax4.plot( data["timestamp"], data["dnsOK"], 'c.--' )		
	ax4.set_ylim(-0.1,1.1)
	ax4.set_ylabel ( "DNS OK?", color='c')
	ax4.tick_params('y', color='c')			
	ax4.xaxis_date()		
	
	fig.autofmt_xdate()
	fig.savefig ( "image.png" )


#-----------------
# Main program
#-----------------

# Configure the logger
logging.basicConfig() #level=logging.DEBUG)
logger = logging.getLogger(__name__)
logger.info ("Program starting")

# Change CWD to where our files are stored
#os.chdir( "/opt/speedtest/" ) 
logger.info ( "Program running in folder: %s", os.getcwd() )

allResults = doAllMeasurements()
logger.debug(allResults)

logFileName = './speedtestMeasurementLog.txt'
writeAMeasurementResult( allResults, logFileName )

makePlots( logFileName )

logger.info ( "Program done" )
