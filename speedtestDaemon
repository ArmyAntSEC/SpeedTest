#!/usr/bin/python

from __future__ import print_function
import subprocess
import json
import sys
import os
import time
from datetime import datetime
from datetime import tzinfo

import numpy as np

import matplotlib
matplotlib.use('Agg') 
import matplotlib.pyplot as plt
import matplotlib.dates as mdates

import logging
import os

import speedtest

#-------------------
# Function to call speedtest-cli and get json response
def doSpeedtest():
	logger = logging.getLogger(__name__)
	if ( 1 ):
		try:		
			proc = subprocess.Popen( ['/usr/local/bin/speedtest-cli', '--json'], stdout=subprocess.PIPE );		
			result = proc.communicate()						
			stString = result[0]
		except:
			logger.error( "Error running the speedtest subprocess" )
			stString = ""
	else:
		stString = '{"bytes_sent": 2678784, "download": 11046830.089912508, "timestamp": "2017-06-24T18:35:33.742058Z", "share": null, "bytes_received": 13884164, "ping": 23.668, "upload": 1346336.9976509183, "server": {"latency": 23.668, "name": "Stockholm", "url": "http://speedtest1.dchosting.se/speedtest/upload.php", "country": "Sweden", "lon": "18.0686", "cc": "SE", "host": "speedtest1.dchosting.se:8080", "sponsor": "Datacom", "url2": "http://speedtest2.dchosting.se/speedtest/upload.php", "lat": "59.3294", "id": "8424", "d": 195.76265185298232}}'
	return stString

#-------------------
# Function to parse json result returned from speedtest-cli
def parseSTOutput ( resultStr ):
	logger = logging.getLogger(__name__)
	try: 
		logger.debug("Parsing speedtest JSON object: %s", resultStr)
		jsonObj = json.loads( resultStr )
		logger.debug(jsonObj)

		downloadMbps = jsonObj['download']/(1024.0*1024)
		uploadMbps = jsonObj['upload']/(1024.0*1024)	
		ping = jsonObj['ping']		

	except ValueError:
		logger.error( "Error parsing SpeedTest return data: [%s]", resultStr)		
		downloadMbps = 0
		uploadMbps = 0
		ping = float('nan')		
	
	timestamp = datetime.now()
	return ( {'timestamp': timestamp, 'downloadMbps': downloadMbps, 'uploadMbps': uploadMbps, 'ping': ping } )	

#-------------------
# Function that calls speedtest-cli and parses result
def doSpeedTestAndParse():
	stString = doSpeedtest()
	result = parseSTOutput( stString )
	return result

#-----------------
# Function to write a piece of data to the log file
def writeAMeasurementResult( result, logFileName ):	

	outputString = "{}\t{}\t{}\t{}\n".format( result["timestamp"].strftime('%Y-%m-%dT%H:%M:%S.%fZ'), result["downloadMbps"], result["uploadMbps"], result["ping"] )	
		
	if (os.path.isfile( logFileName) == False):
		fout = open( logFileName, 'w')
		fout.write( 'timestamp\tdownloadMbps\tuploadMbps\tping\n' )
		fout.close()
	
	fout = open( logFileName, 'a')	
	fout.seek(0,os.SEEK_END)
	fout.write( outputString )
	fout.close()

def parseLogFile( logFileName ):
	logger = logging.getLogger(__name__)

	fin = open( logFileName, 'r' )
	fin.readline() #Read the header line
	
	timestampList = []
	downloadList = []
	uploadList = []
	pingList = []

	for line in fin:
		# Tokenize line and store as three arrays		
		lineSplit = line.split("\t")

		try:
			thisTimestamp = datetime.strptime( lineSplit[0], '%Y-%m-%dT%H:%M:%S.%fZ' )
			thisDownloadMbps = float( lineSplit[1] )
			thisUploadMbps = float( lineSplit[2] )		
			thisPing = float( lineSplit[3] )
		except:
			logger.error ( "Could not parse log file. Moving on. Bad line: [%s]", line )
		
		
		timestampList.append( thisTimestamp )
		downloadList.append( thisDownloadMbps )
		uploadList.append( thisUploadMbps )
		pingList.append( thisPing )
	
	fin.close()
	
	return {"timestamp": np.array(timestampList), 
		"downloadMbps": np.array(downloadList), 
		"uploadMbps": np.array(uploadList), 
		"ping": np.array(pingList) }
	

def makePlots(logFileName):
	data = parseLogFile(logFileName)
	
	# Plot the arrays in data
	ax1 = plt.subplot(311)
	ax2 = plt.subplot(312)
	ax3 = plt.subplot(313)
	fig = ax1.figure

	ax1.plot( data["timestamp"], data["downloadMbps"], '.-' )		
	ax1.set_ylabel ( "Down [Mbit]")
	ax1.xaxis_date()
	
	ax2.plot( data["timestamp"], data["uploadMbps"], '.-' )		
	ax2.set_ylabel ( "Up [Mbit]")
	ax2.xaxis_date()
	
	ax3.plot( data["timestamp"], data["ping"], '.-' )	
	ax3.set_xlabel("Measurement date")
	ax3.set_ylabel ( "Ping [ms]")
	ax3.xaxis_date()

	fig.autofmt_xdate()
	fig.savefig ( "image.png" )

	
#-----------------
# Main program
#-----------------

# Configure the logger
logging.basicConfig() # level=logging.DEBUG)
logger = logging.getLogger(__name__)
logger.info ("Program starting")

# Change CWD to where our files are stored
os.chdir( "/opt/speedtest/" ) 
logger.info ( "Program running in folder: %s", os.getcwd() )

# Run the core of the program
result = doSpeedTestAndParse()
logger.debug( "Data received: %s", result )

logFileName = './speedtestMeasurementLog.txt'
writeAMeasurementResult( result, logFileName )

# Now make plots
makePlots( logFileName )

logger.info ( "Program done" )
