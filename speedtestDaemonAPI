#!/usr/bin/python

import speedtest
import logging
import os

import socket
import random
import string

import subprocess
import re #Regular expressions

import numpy as np

import matplotlib
matplotlib.use('Agg') 
import matplotlib.pyplot as plt
import matplotlib.dates as mdates


from datetime import datetime
#from datetime import tzinfo

def doSpeedtestAPI():
	logger = logging.getLogger(__name__)
	serversToAskFor = []
	
	try:
		logger.debug( "Getting configuration" )
		s = speedtest.Speedtest()	
		logger.debug( "Asking for list of servers" )
		s.get_servers(serversToAskFor)		
		logger.debug( "Selecting best server" )	
		s.get_best_server()
		logger.debug( "Measuring download speed" )
		s.download()
		logger.debug( "Measuring upload speed" )
		s.upload()
		logger.debug( "Speed test complete" )

		results_raw = s.results.dict()
		
		downloadMbps = results_raw['download']/(1024.0*1024)
		uploadMbps = results_raw['upload']/(1024.0*1024)			

		results = {'downloadMbps': downloadMbps, 'uploadMbps': uploadMbps }

	except:
		logger.exception( "Exception caught trying to perform speed test" )
		results = {'downloadMbps': 0, 'uploadMbps': 0 }


	return results

def fpingAndGetStats( addresses ):
	logger = logging.getLogger(__name__)
	stats = {}
	try:		
		# Run fping with 10 packages of random data, showing only final stats.		
		proc = subprocess.Popen( ['/usr/local/bin/fping', '--count=10', '-q', '-R'] + addresses, stderr=subprocess.PIPE );		
		result = proc.communicate()						
		stString = result[1]
		logger.debug ( stString )
		# sample string: "kth.se : xmt/rcv/%loss = 10/10/0%, min/avg/max = 3.69/23.6/122"

		reg = re.compile ( r"(?P<server>\S+)\s+: xmt/rcv/%loss = (?:[\d\.]+)/(?:[\d\.]+)/(?P<loss>[\d\.]+)%(?:, min/avg/max = (?:[\d\.]+)/(?P<avgPing>[\d\.]+)/(?:[\d\.]+))?" )
		startPos = 0;
		while ( True ):			
			match = reg.search( stString, startPos )
			if match == None:
				break						

			server = match.group('server')

			loss = float(match.group('loss'))			
			if loss == None:
				loss = float('nan')			
			loss = float(loss)			
			
			avgPing = match.group('avgPing')
			if avgPing == None:
				avgPing = float('nan')
			avgPing = float(avgPing)


			theseStats = {'loss': loss, 'avgPing': avgPing}
			
			logger.debug( (server, theseStats) )
			
			stats[server] = theseStats;			
			startPos = match.end(0)
		

	except:
		logger.exception( "Error doing internet connectivity check" )
		
	return stats

def doHostnameResolution():
	
	allOK = False
	try:
		response = socket.gethostbyname( 'kth.se' )
		logger.debug( "Result of resolving kth.se: %s", response )
		allOK = True
	except:
		logger.exception( "Error doing DNS resolution" )
		allOK = False

	return allOK

def doAllMeasurements():
	logger = logging.getLogger(__name__)

	dnsOK = doHostnameResolution()
	logger.info( 'DNS OK: %d', dnsOK )

	pingStats = fpingAndGetStats( ['8.8.8.8', 'kth.se', 'bredbandsbolaget.se'] )
	logger.info ( pingStats )

	speedMeasurement = doSpeedtestAPI()
	logger.info ( speedMeasurement )

	return {'timestamp': datetime.now(), 'dnsOK': dnsOK, 'pingStats': pingStats, 'speedMeasurement': speedMeasurement}

def writeAMeasurementResult( result, logFileName ):	

	outputString = "{}\t{}\t{}\t{}\t{}\t{}\t{}\t{}\t{}\t{}\n".format( 
		result["timestamp"].strftime('%Y-%m-%dT%H:%M:%S.%fZ'), 
		int(result['dnsOK']), 
		result['pingStats']['bredbandsbolaget.se']['loss'],
		result['pingStats']['bredbandsbolaget.se']['avgPing'],
		result['pingStats']['kth.se']['loss'],
		result['pingStats']['kth.se']['avgPing'],
		result['pingStats']['8.8.8.8']['loss'],
		result['pingStats']['8.8.8.8']['avgPing'],
		result['speedMeasurement']["downloadMbps"], 
		result['speedMeasurement']["uploadMbps"] )	
		
	if (os.path.isfile( logFileName) == False):
		fout = open( logFileName, 'w')
		fout.write( 'timestamp\tdnsOK\tbbbLoss\tbbbPingAvg\tkthLoss\tkthPingAvg\tgoogleLoss\tgooglePingAvg\tdownloadMbps\tuploadMbps\n' )
		fout.close()
	
	fout = open( logFileName, 'a')	
	fout.seek(0,os.SEEK_END)
	fout.write( outputString )
	fout.close()

def parseLogFile( logFileName ):
	logger = logging.getLogger(__name__)

	fin = open( logFileName, 'r' )
	fin.readline() #Read the header line
	
	timestampList = []
	dnsOKList = []
	bbbLossList = []
	bbbAvgPingList = []
	kthLossList = []
	kthAvgPingList = []
	googleLossList = []
	googleAvgPingList = []
	downloadList = []
	uploadList = []	

	for line in fin:
		# Tokenize line and store as arrays		
		lineSplit = line.split("\t")

		try:
			thisTimestamp = datetime.strptime( lineSplit[0], '%Y-%m-%dT%H:%M:%S.%fZ' )
			thisDnsOK = int(lineSplit[1])
			thisBbbLoss = float(lineSplit[2])
			thisBbbPingAvg = float(lineSplit[3])
			thisKthLoss = float(lineSplit[4])
			thisKthPingAvg = float(lineSplit[5])
			thisGoogleLoss = float(lineSplit[6])
			thisGooglePingAvg = float(lineSplit[7])
			thisDownloadMbps = float(lineSplit[8])
			thisUploadMbps = float(lineSplit[9])
		except:
			logger.error ( "Could not parse log file. Moving on. Bad line: [%s]", line )
		
		timestampList.append( thisTimestamp )
		
		dnsOKList.append(thisDnsOK)

		bbbLossList.append(thisBbbLoss)
		bbbAvgPingList.append(thisBbbPingAvg)
		kthLossList.append(thisKthLoss)
		kthAvgPingList.append(thisKthPingAvg)
		googleLossList.append(thisGoogleLoss)
		googleAvgPingList.append(thisGooglePingAvg)

		downloadList.append( thisDownloadMbps )
		uploadList.append( thisUploadMbps )		
	
	fin.close()
	
	pingServers = ['bredbandsbolaget.se', 'kth.se', '8.8.8.8']
	
	lossArray = np.transpose(np.vstack( (np.array(bbbLossList), np.array(kthLossList), np.array(googleLossList)) ))
	pingAvgArray = np.transpose(np.vstack( (np.array(bbbAvgPingList), np.array(kthAvgPingList), 
		np.array(googleAvgPingList)) ))	

	return {"timestamp": np.array(timestampList), 
		"dnsOK": np.array(dnsOKList),
		"loss": lossArray,		
		"pingAvg": pingAvgArray,
		"downloadMbps": np.array(downloadList), 
		"uploadMbps": np.array(uploadList) }
	
def makePlots(logFileName):
	data = parseLogFile(logFileName)
	
	# Plot the arrays in data
	ax1 = plt.subplot(311)
	ax2 = plt.subplot(312)
	ax3 = plt.subplot(313)
	fig = ax1.figure

	ax1.plot( data["timestamp"], data["downloadMbps"], 'b.-', data["timestamp"], data["uploadMbps"], 'r.-' )		
	ax1.set_ylabel ( "[Mbit]")
	ax1.legend ( ['Download', 'Upload'], 'upper left' )
	ax1.xaxis_date()


	ax3.plot( data["timestamp"], data["dnsOK"], '.-' )		
	ax3.set_ylabel ( "DNS OK?")	
	ax3.set_xlabel("Measurement date")
	ax3.xaxis_date()		
	
	fig.autofmt_xdate()
	fig.savefig ( "image.png" )


#-----------------
# Main program
#-----------------

# Configure the logger
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)
logger.info ("Program starting")

# Change CWD to where our files are stored
os.chdir( "/opt/speedtest/" ) 
logger.info ( "Program running in folder: %s", os.getcwd() )

allResults = doAllMeasurements()
#logger.debug(allResults)

logFileName = './speedtestMeasurementLog.txt'
writeAMeasurementResult( allResults, logFileName )

makePlots( logFileName )

logger.info ( "Program done" )
